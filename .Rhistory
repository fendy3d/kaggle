View(mat2)
fit_sig
summary(fit_sig)
wald.test(b = coef(sig_fit), Sigma = vcov(sig_fit), Terms = 2:19)
wald.test(b = coef(fit_sig), Sigma = vcov(fit_sig), Terms = 2:19)
wald.test(b = coef(sig_fit), Sigma = vcov(sig_fit), Terms = 1:19)
wald.test(b = coef(sig_fit), Sigma = vcov(sig_fit), Terms = 2:19)
wald.test(b = coef(sig_fit), Sigma = vcov(sig_fit), Terms = 1:19))
wald.test(b = coef(sig_fit), Sigma = vcov(sig_fit), Terms = 2:19))
wald.test(b = coef(fit_sig), Sigma = vcov(fit_sig), Terms = 1:19)
df<-data.frame(Gender=factor(c(Gender)))
attach(data_appt)
df<-data.frame(Gender=factor(c(Gender)))
df
attach(mat2)
df<-data.frame(Gender=factor(c(mat2$Gender)))
df<-data.frame(Gender=factor(Gender),Race=factor(Race),Age=factor(Age),Doctor.Rank=factor(Doctor.Rank),Patient.Class=factor(Patient.Class)+VMC=c(VMC),AppointmentInterval=factor(Appointment.Interval.1))
df<-data.frame(Gender=factor(Gender),Race=factor(Race),Age=factor(Age),Doctor.Rank=factor(Doctor.Rank),Patient.Class=factor(Patient.Class),VMC=c(VMC),AppointmentInterval=factor(Appointment.Interval.1))
df
View(df)
mat2<-model.matrix(~Gender+Race+Age+Doctor.Rank+Patient.Class+VMC+Appointment.Interval.1-1, data=df, contrast.arg=sapply(df,contrasts,contrasts=F))
View(mat2)
df<-data.frame(Gender=factor(Gender),Race=factor(Race),Age=factor(Age),Doctor.Rank=factor(Doctor.Rank),Patient.Class=factor(Patient.Class),VMC=c(VMC),Appointment.Interval.1=factor(Appointment.Interval.1))
mat2<-model.matrix(~Gender+Race+Age+Doctor.Rank+Patient.Class+VMC+Appointment.Interval.1-1, data=df, contrast.arg=sapply(df,contrasts,contrasts=F))
View(mat2)
mat2<-model.matrix(~.+0, data=df, contrast.arg=sapply(df,contrasts,contrasts=F))
View(mat2)
length(mat2)
row.length(mat2)
size(mat2)
dim(mat2)
coef<-coef(fit_sig)
length(coef)
summary(fit_sig)
fit_sig<-glm(Appointment.Status~as.factor(Gender)+as.factor(Race)+as.factor(Age)+as.factor(Doctor.Rank)+as.factor(Patient.Class)+as.factor(VMC)+as.factor(Appointment.Interval.1),family='binomial',data=data_appt)
df<-data.frame(Gender=factor(Gender),Race=factor(Race),Age=factor(Age),Doctor.Rank=factor(Doctor.Rank),Patient.Class=factor(Patient.Class),VMC=factor(VMC),Appointment.Interval.1=factor(Appointment.Interval.1))
mat2<-model.matrix(~.+0, data=df, contrast.arg=sapply(df,contrasts,contrasts=F))
dim(mat2)
coef<-coef(fit_sig)
length(coef)
res<-mat2*coef
res
summary(res)
prob<-(1/(1+exp(-res)))
prob
max(prob)
min(prob)
plot(y=prob,x=[1:length(prob)])
length(prob)
plot(y=prob,x=[1:363246])
plot(y=prob,x=(1:363246))
plot
plot<-plot(y=prob,x=(1:363246))
plot
res
dim(mat2)
dim(coef)
coef<-c(coef(fit_sig))
dim(coef)
coef
x <- 1:5; coef(lm(c(1:3, 7, 6) ~ x))
x
plot(x)
coef(x)
coef
coef<-as.numeric(coef(fit_sig))
coef
dim(coef)
coef<-c(as.numeric(coef(fit_sig)))
dim(coef)
coef
length(ceof)
length(coef)
coef<-model.matrix(c(as.numeric(coef(fit_sig))))
coef<-model.matrix((as.numeric(coef(fit_sig))))
coef<-model.matrix((as.numeric(coef(fit_sig)))
)
coef<-model.matrix(as.numeric(coef(fit_sig)))
coef<-matrix(as.numeric(coef(fit_sig)))
ceof
coef
dim(coef)
result
result<-mat2*coef
dim(mat2)
result<-mat2%*%coef
result
prob<-1/(1+exp(-result))
len<-length(coef)
len
len<-length(mat2)
len
prob<-1/(1+exp(-result))
plot<-plot(x=len, y=prob)
plot(prob)
length(prob)
diff<-prob-data_appt$Appointment.Status
plot(diff)
diff<-(prob-data_appt$Appointment.Status)^2
plot(diff)
View(mat2)
save.image("~/Dropbox/SUTD/LECTURE NOTES/Term 7/Capstone 1/Parsedata/Final data sets/transform.RData")
savehistory("~/Dropbox/SUTD/LECTURE NOTES/Term 7/Capstone 1/Parsedata/Final data sets/transform_history.Rhistory")
View(data_appt)
View(data_appt)
fit
lm
glm<-glm(Appointment.Status~as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Hours) + as.factor(Month) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(Doctor.Change) + as.factor(Visit.Type) + as.factor(SourceOfReferral) + as.factor(DistanceToSGH) + VMC + as.factor(Appointment.Interval.1), family = 'binomial',data = data_appt)
summary(glm)
library("aod", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = all)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = [:])
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = [1:])
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = [1:.])
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = [.:])
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = [1:52])
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 1:52)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 1:55)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 1:53)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 1:54)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 2:54)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 2:50)
wald.test(b = coef(glm), Sigma = vcov(glm), Terms = 2:45)
power<-read.xls(file.choose())
power<-read(file.choose())
power<-read.xlsx(file.choose())
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rfNews()
install.packages("party")
install.packages("bigrf")
View(data_appt)
?ggplot
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) +              as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) +              as.factor(VMC) + as.factor(Appointment.Interval.1), family = binomial(),          data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family = binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family = binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1, family = binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family = binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family=binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family=binomial(), data = data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender) + as.factor(Race) + as.factor(Age) + as.factor(Doctor.Rank) + as.factor(Patient.Class) + as.factor(VMC) + as.factor(Appointment.Interval.1), family=binomial(), data=data_appt)
mat<-glm(formula = Appointment.Status ~ as.factor(Gender), family=binomial(), data=data_appt)
mat<-glm(Appointment.Status ~ as.factor(Gender), family=binomial(), data=data_appt)
glm
glm
View(glm)
plot(glm)
plot(fitall)
fitall
?glm
str(glm)
fitted(glm)
gp <- ggplot(data_appt)+ geom_bar(aes(x=Doctor.Rank,y=Appointment.Status))
library(ggplot2)
gp <- ggplot(data_appt)+ geom_bar(aes(x=Doctor.Rank,y=Appointment.Status))
gp
ggplot(data_appt)+ geom_bar(aes(x=Doctor.Rank,y=Appointment.Status))
ggplot(data_appt)+ geom_histogrm(aes(x=Appointment.Status))
ggplot(data_appt)+ geom_histogram(aes(x=Appointment.Status))
ggplot(data_appt)+ geom_histogram(aes(x=Appointment.Status),binwidth=0.5)
ggplot(data_appt)+ geom_histogram(aes(x=Appointment.Status),binwidth=1)
ggplot(data_appt)+ geom_histogram(aes(x=as.factor(Appointment.Status)))
ggplot(data_appt)+ geom_histogram(aes(x=as.factor(Appointment.Status))) ~ facet_wrap(~Doctor.Rank,ncol=2)
ggplot(data_appt)+ geom_histogram(aes(x=as.factor(Appointment.Status))) + facet_wrap(~Doctor.Rank,ncol=2)
ggplot(data_appt)+ geom_histogram(aes(x=as.factor(Appointment.Status))) + facet_wrap(~Doctor.Rank,ncol=3)
ggplot(data_appt)+ geom_histogram(aes(x=as.factor(Appointment.Status))) + facet_wrap(~Doctor.Rank)
install.packages("C50")
baseline
baseline <- 1898/(12303+1898)
baseline
WOW(J48)
library(RWeka)
WOW(J48)
WOW(CostSensitiveClassifier())
?Weka_classifier_meta
install.packages("TeX")
str(College)
library(ISLR)
install.packages("ISLR")
install.packages("leaps")
install.packages("glmnet")
train <- read.csv("train.csv")
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
train <- read.csv("train.csv")
setwd("~/Dropbox/SUTD/LECTURE NOTES/Term 8/Analytics wd/Kaggle/kaggle")
train <- read.csv("train.csv")
library(mlogit)
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
traindatanew <- subset(traindata, select = - c(1,2,3,15,16,17,18,20,41))
traindatanew$income <- ifelse(traindatanew$income == "Under $29,999", 15000, ifelse(traindatanew$income == "$30,000 to $39,999", 35000, ifelse(traindatanew$income =="$40,000 to $49,999", 45000, ifelse(traindatanew$income =="$50,000 to $59,999", 55000, ifelse(traindatanew$income =="$60,000 to $69,999", 65000, ifelse(traindatanew$income =="$70,000 to $79,999", 75000, ifelse(traindatanew$income =="$80,000 to $89,999", 85000, ifelse(traindatanew$income =="$90,000 to $99,999", 95000, ifelse(traindatanew$income =="$100,000 to $109,999", 105000, ifelse(traindatanew$income == "$110,000 to $119,999", 115000, ifelse(traindatanew$income == "$120,000 to $129,999", 125000, ifelse(traindatanew$income == "$130,000 to $139,999", 135000, ifelse(traindatanew$income == "$140,000 to $149,999", 145000, ifelse(traindatanew$income == "$150,000 to $159,999", 155000, ifelse(traindatanew$income == "$160,000 to $169,999", 165000, ifelse(traindatanew$income == "$170,000 to $179,999", 175000, ifelse(traindatanew$income == "$180,000 to $189,999", 185000, ifelse(traindatanew$income == "$190,000 to $199,999", 195000, ifelse(traindatanew$income == "$200,000 to $209,999", 205000, ifelse(traindatanew$income == "$220,000 to $229,999", 225000, ifelse(traindatanew$income == "$230,000 to $239,999", 235000, ifelse(traindatanew$income == "$250,000 to $259,999", 255000, ifelse(traindatanew$income == "$270,000 to $279,999", 275000, ifelse(traindatanew$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
head(traindatanew)
class(traindatanew$Choice)
FALSE=="FALSE"
FALSE==0
test <- read.csv("test.csv")
testdata <- mlogit.data(test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
testdatanew <- subset(testdata, select = - c(1,2,3,15,16,17,18,20,41))
C50model1 <- C5.0(as.factor(Choice) ~ ., data = traindatanew)
library(C50)
?predict.C5.0
predC50 <- predict.C5.0(C50model1, newdata = testdatanew, type = "prob")
C50model1 <- C5.0(as.factor(Choice) ~ ., data = traindatanew)
predC50 <- predict.C5.0(C50model1, newdata = testdatanew, type = "prob")
testdatanew$income <- ifelse(testdatanew$income == "Under $29,999", 15000, ifelse(testdatanew$income == "$30,000 to $39,999", 35000, ifelse(testdatanew$income =="$40,000 to $49,999", 45000, ifelse(testdatanew$income =="$50,000 to $59,999", 55000, ifelse(testdatanew$income =="$60,000 to $69,999", 65000, ifelse(testdatanew$income =="$70,000 to $79,999", 75000, ifelse(testdatanew$income =="$80,000 to $89,999", 85000, ifelse(testdatanew$income =="$90,000 to $99,999", 95000, ifelse(testdatanew$income =="$100,000 to $109,999", 105000, ifelse(testdatanew$income == "$110,000 to $119,999", 115000, ifelse(testdatanew$income == "$120,000 to $129,999", 125000, ifelse(testdatanew$income == "$130,000 to $139,999", 135000, ifelse(testdatanew$income == "$140,000 to $149,999", 145000, ifelse(testdatanew$income == "$150,000 to $159,999", 155000, ifelse(testdatanew$income == "$160,000 to $169,999", 165000, ifelse(testdatanew$income == "$170,000 to $179,999", 175000, ifelse(testdatanew$income == "$180,000 to $189,999", 185000, ifelse(testdatanew$income == "$190,000 to $199,999", 195000, ifelse(testdatanew$income == "$200,000 to $209,999", 205000, ifelse(testdatanew$income == "$220,000 to $229,999", 225000, ifelse(testdatanew$income == "$230,000 to $239,999", 235000, ifelse(testdatanew$income == "$250,000 to $259,999", 255000, ifelse(testdatanew$income == "$270,000 to $279,999", 275000, ifelse(testdatanew$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
predC50 <- predict.C5.0(C50model1, newdata = testdatanew, type = "prob")
head(predC50)
N <- nrow(test)
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
head(predC50Matrix)
predC50Matrix_log <- log(predC50Matrix)
logloss<- -(sum(predC50Matrix_log*train[,95:98]))/N
logloss
model1 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, data = train)
summary(model1)
model1 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, data = train)
model1 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, data = traindata)
summary(model1)
pred1 <- predict(model1, newdata = traindata)
pred1
sum(pred1[1,])
model1 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price-1, data = traindata)
summary(model1)
AIC(model1)
model2 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch1" data = traindata)
model2 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch1", data = traindata)
summary(model2)
AIC(model2)
model3 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch2", data = traindata)
summary(model3)
AIC(model3) #22988.89
model2 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch1", data = traindata)
summary(model2)
AIC(model2) #22988.89
model3 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch2", data = traindata)
summary(model3)
AIC(model3) #22988.89
model4 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch3", data = traindata)
summary(model4)
AIC(model4) #22988.89
?mlogit
model5 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price, reflevel = "Ch4", data = traindata)
summary(model5)
AIC(model5) #22988.89
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income, data = traindata)
summary(model6)
AIC(model6) #23645.76
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + gender + age , data = traindata)
summary(model6)
AIC(model6) #22882.07
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + gender + age + region + Urb + ppark + night, data = traindata)
summary(model6)
AIC(model6) #22882.07
pred6 <- predict(model6, newdata = testdata)
pred6 <- predict(model6, newdata = traindata)
pred6 <- predict(model6, newdata = testdata)
str(testdata)
pred6 <- predict(model6, newdata = traindata)
traindata$income <- ifelse(traindata$income == "Under $29,999", 15000, ifelse(traindata$income == "$30,000 to $39,999", 35000, ifelse(traindata$income =="$40,000 to $49,999", 45000, ifelse(traindata$income =="$50,000 to $59,999", 55000, ifelse(traindata$income =="$60,000 to $69,999", 65000, ifelse(traindata$income =="$70,000 to $79,999", 75000, ifelse(traindata$income =="$80,000 to $89,999", 85000, ifelse(traindata$income =="$90,000 to $99,999", 95000, ifelse(traindata$income =="$100,000 to $109,999", 105000, ifelse(traindata$income == "$110,000 to $119,999", 115000, ifelse(traindata$income == "$120,000 to $129,999", 125000, ifelse(traindata$income == "$130,000 to $139,999", 135000, ifelse(traindata$income == "$140,000 to $149,999", 145000, ifelse(traindata$income == "$150,000 to $159,999", 155000, ifelse(traindata$income == "$160,000 to $169,999", 165000, ifelse(traindata$income == "$170,000 to $179,999", 175000, ifelse(traindata$income == "$180,000 to $189,999", 185000, ifelse(traindata$income == "$190,000 to $199,999", 195000, ifelse(traindata$income == "$200,000 to $209,999", 205000, ifelse(traindata$income == "$220,000 to $229,999", 225000, ifelse(traindata$income == "$230,000 to $239,999", 235000, ifelse(traindata$income == "$250,000 to $259,999", 255000, ifelse(traindata$income == "$270,000 to $279,999", 275000, ifelse(traindata$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
str(testdata)
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
traindata$income <- ifelse(traindata$income == "Under $29,999", 15000, ifelse(traindata$income == "$30,000 to $39,999", 35000, ifelse(traindata$income =="$40,000 to $49,999", 45000, ifelse(traindata$income =="$50,000 to $59,999", 55000, ifelse(traindata$income =="$60,000 to $69,999", 65000, ifelse(traindata$income =="$70,000 to $79,999", 75000, ifelse(traindata$income =="$80,000 to $89,999", 85000, ifelse(traindata$income =="$90,000 to $99,999", 95000, ifelse(traindata$income =="$100,000 to $109,999", 105000, ifelse(traindata$income == "$110,000 to $119,999", 115000, ifelse(traindata$income == "$120,000 to $129,999", 125000, ifelse(traindata$income == "$130,000 to $139,999", 135000, ifelse(traindata$income == "$140,000 to $149,999", 145000, ifelse(traindata$income == "$150,000 to $159,999", 155000, ifelse(traindata$income == "$160,000 to $169,999", 165000, ifelse(traindata$income == "$170,000 to $179,999", 175000, ifelse(traindata$income == "$180,000 to $189,999", 185000, ifelse(traindata$income == "$190,000 to $199,999", 195000, ifelse(traindata$income == "$200,000 to $209,999", 205000, ifelse(traindata$income == "$220,000 to $229,999", 225000, ifelse(traindata$income == "$230,000 to $239,999", 235000, ifelse(traindata$income == "$250,000 to $259,999", 255000, ifelse(traindata$income == "$270,000 to $279,999", 275000, ifelse(traindata$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
str(traindata)
testdata <- mlogit.data(test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
testdata$income <- ifelse(testdata$income == "Under $29,999", 15000, ifelse(testdata$income == "$30,000 to $39,999", 35000, ifelse(testdata$income =="$40,000 to $49,999", 45000, ifelse(testdata$income =="$50,000 to $59,999", 55000, ifelse(testdata$income =="$60,000 to $69,999", 65000, ifelse(testdata$income =="$70,000 to $79,999", 75000, ifelse(testdata$income =="$80,000 to $89,999", 85000, ifelse(testdata$income =="$90,000 to $99,999", 95000, ifelse(testdata$income =="$100,000 to $109,999", 105000, ifelse(testdata$income == "$110,000 to $119,999", 115000, ifelse(testdata$income == "$120,000 to $129,999", 125000, ifelse(testdata$income == "$130,000 to $139,999", 135000, ifelse(testdata$income == "$140,000 to $149,999", 145000, ifelse(testdata$income == "$150,000 to $159,999", 155000, ifelse(testdata$income == "$160,000 to $169,999", 165000, ifelse(testdata$income == "$170,000 to $179,999", 175000, ifelse(testdata$income == "$180,000 to $189,999", 185000, ifelse(testdata$income == "$190,000 to $199,999", 195000, ifelse(testdata$income == "$200,000 to $209,999", 205000, ifelse(testdata$income == "$220,000 to $229,999", 225000, ifelse(testdata$income == "$230,000 to $239,999", 235000, ifelse(testdata$income == "$250,000 to $259,999", 255000, ifelse(testdata$income == "$270,000 to $279,999", 275000, ifelse(testdata$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + gender + age + region + Urb + ppark + night, data = traindata)
AIC(model6) #22882.07
pred6 <- predict(model6, newdata = testdata)
str(traindata)
testdata <- mlogit.data(test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
testdata$income <- ifelse(testdata$income == "Under $29,999", 15000, ifelse(testdata$income == "$30,000 to $39,999", 35000, ifelse(testdata$income =="$40,000 to $49,999", 45000, ifelse(testdata$income =="$50,000 to $59,999", 55000, ifelse(testdata$income =="$60,000 to $69,999", 65000, ifelse(testdata$income =="$70,000 to $79,999", 75000, ifelse(testdata$income =="$80,000 to $89,999", 85000, ifelse(testdata$income =="$90,000 to $99,999", 95000, ifelse(testdata$income =="$100,000 to $109,999", 105000, ifelse(testdata$income == "$110,000 to $119,999", 115000, ifelse(testdata$income == "$120,000 to $129,999", 125000, ifelse(testdata$income == "$130,000 to $139,999", 135000, ifelse(testdata$income == "$140,000 to $149,999", 145000, ifelse(testdata$income == "$150,000 to $159,999", 155000, ifelse(testdata$income == "$160,000 to $169,999", 165000, ifelse(testdata$income == "$170,000 to $179,999", 175000, ifelse(testdata$income == "$180,000 to $189,999", 185000, ifelse(testdata$income == "$190,000 to $199,999", 195000, ifelse(testdata$income == "$200,000 to $209,999", 205000, ifelse(testdata$income == "$220,000 to $229,999", 225000, ifelse(testdata$income == "$230,000 to $239,999", 235000, ifelse(testdata$income == "$250,000 to $259,999", 255000, ifelse(testdata$income == "$270,000 to $279,999", 275000, ifelse(testdata$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
pred6 <- predict(model6, newdata = testdata)
pred6 <- predict(model6, newdata = testdata, type = "ggg")
testdata <- mlogit.data(test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
testdatanew$Choice <- factor(ifelse(testdatanew$Choice == TRUE, 1, 0))
testdata$income <- ifelse(testdata$income == "Under $29,999", 15000, ifelse(testdata$income == "$30,000 to $39,999", 35000, ifelse(testdata$income =="$40,000 to $49,999", 45000, ifelse(testdata$income =="$50,000 to $59,999", 55000, ifelse(testdata$income =="$60,000 to $69,999", 65000, ifelse(testdata$income =="$70,000 to $79,999", 75000, ifelse(testdata$income =="$80,000 to $89,999", 85000, ifelse(testdata$income =="$90,000 to $99,999", 95000, ifelse(testdata$income =="$100,000 to $109,999", 105000, ifelse(testdata$income == "$110,000 to $119,999", 115000, ifelse(testdata$income == "$120,000 to $129,999", 125000, ifelse(testdata$income == "$130,000 to $139,999", 135000, ifelse(testdata$income == "$140,000 to $149,999", 145000, ifelse(testdata$income == "$150,000 to $159,999", 155000, ifelse(testdata$income == "$160,000 to $169,999", 165000, ifelse(testdata$income == "$170,000 to $179,999", 175000, ifelse(testdata$income == "$180,000 to $189,999", 185000, ifelse(testdata$income == "$190,000 to $199,999", 195000, ifelse(testdata$income == "$200,000 to $209,999", 205000, ifelse(testdata$income == "$220,000 to $229,999", 225000, ifelse(testdata$income == "$230,000 to $239,999", 235000, ifelse(testdata$income == "$250,000 to $259,999", 255000, ifelse(testdata$income == "$270,000 to $279,999", 275000, ifelse(testdata$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
pred6 <- predict(model6, newdata = testdata, type = "ggg")
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + gender + age + region + Urb + ppark + night, data = traindata)
summary(model6)
AIC(model6) #22310.62
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + age + region + Urb + ppark + night, data = traindata)
summary(model6)
AIC(model6) #22310.62
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + age + region + Urb + ppark + night, data = traindata)
library(ISLR)
library(leaps)
train.mat <- model.matrix(Choice ~., data = train)
var.length <- ncol(College) - 1
k <- 10
set.seed(100)
ncol(train)
C5imp(C50model1)
C50model1 <- C5.0(as.factor(Choice) ~ ., data = traindatanew)
predC50 <- predict.C5.0(C50model1, newdata = testdatanew, type = "prob")
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
head(predC50Matrix)
predC50Matrix_log <- log(predC50Matrix)
logloss<- -(sum(predC50Matrix_log*train[,95:98]))/N
logloss
sum(predC50Matrix[1,])
train <- read.csv("train.csv")
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
traindatanew <- subset(traindata, select = - c(1,2,3,15,16,17,18,20,41))
str(traindatanew)
traindatanew$CC <- factor(traindatanew$CC)
traindatanew$GN <- factor(traindatanew$GN)
traindatanew$NS <- factor(traindatanew$NS)
traindatanew$BU <- factor(traindatanew$BU)
traindatanew$FA <- factor(traindatanew$FA)
traindatanew$LD <- factor(traindatanew$LD)
traindatanew$BZ <- factor(traindatanew$BZ)
traindatanew$FC <- factor(traindatanew$FC)
traindatanew$FP <- factor(traindatanew$FP)
traindatanew$RP <- factor(traindatanew$RP)
traindatanew$PP <- factor(traindatanew$PP)
traindatanew$KA <- factor(traindatanew$KA)
traindatanew$SC <- factor(traindatanew$SC)
traindatanew$TS <- factor(traindatanew$TS)
traindatanew$NV <- factor(traindatanew$NV)
traindatanew$MA <- factor(traindatanew$MA)
traindatanew$LB <- factor(traindatanew$LB)
traindatanew$AF <- factor(traindatanew$AF)
traindatanew$HU <- factor(traindatanew$HU)
traindatanew$Price <- factor(traindatanew$Price)
traindatanew$year <- factor(traindatanew$year)
traindatanew$Choice <- factor(ifelse(traindatanew$Choice == TRUE, 1, 0))
traindatanew$income <- ifelse(traindatanew$income == "Under $29,999", 15000, ifelse(traindatanew$income == "$30,000 to $39,999", 35000, ifelse(traindatanew$income =="$40,000 to $49,999", 45000, ifelse(traindatanew$income =="$50,000 to $59,999", 55000, ifelse(traindatanew$income =="$60,000 to $69,999", 65000, ifelse(traindatanew$income =="$70,000 to $79,999", 75000, ifelse(traindatanew$income =="$80,000 to $89,999", 85000, ifelse(traindatanew$income =="$90,000 to $99,999", 95000, ifelse(traindatanew$income =="$100,000 to $109,999", 105000, ifelse(traindatanew$income == "$110,000 to $119,999", 115000, ifelse(traindatanew$income == "$120,000 to $129,999", 125000, ifelse(traindatanew$income == "$130,000 to $139,999", 135000, ifelse(traindatanew$income == "$140,000 to $149,999", 145000, ifelse(traindatanew$income == "$150,000 to $159,999", 155000, ifelse(traindatanew$income == "$160,000 to $169,999", 165000, ifelse(traindatanew$income == "$170,000 to $179,999", 175000, ifelse(traindatanew$income == "$180,000 to $189,999", 185000, ifelse(traindatanew$income == "$190,000 to $199,999", 195000, ifelse(traindatanew$income == "$200,000 to $209,999", 205000, ifelse(traindatanew$income == "$220,000 to $229,999", 225000, ifelse(traindatanew$income == "$230,000 to $239,999", 235000, ifelse(traindatanew$income == "$250,000 to $259,999", 255000, ifelse(traindatanew$income == "$270,000 to $279,999", 275000, ifelse(traindatanew$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
test <- read.csv("test.csv")
testdata <- mlogit.data(test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
testdatanew <- subset(testdata, select = - c(1,2,3,15,16,17,18,20,41))
testdatanew$CC <- factor(testdatanew$CC)
testdatanew$GN <- factor(testdatanew$GN)
testdatanew$NS <- factor(testdatanew$NS)
testdatanew$BU <- factor(testdatanew$BU)
testdatanew$FA <- factor(testdatanew$FA)
testdatanew$LD <- factor(testdatanew$LD)
testdatanew$BZ <- factor(testdatanew$BZ)
testdatanew$FC <- factor(testdatanew$FC)
testdatanew$FP <- factor(testdatanew$FP)
testdatanew$RP <- factor(testdatanew$RP)
testdatanew$PP <- factor(testdatanew$PP)
testdatanew$KA <- factor(testdatanew$KA)
testdatanew$SC <- factor(testdatanew$SC)
testdatanew$TS <- factor(testdatanew$TS)
testdatanew$NV <- factor(testdatanew$NV)
testdatanew$MA <- factor(testdatanew$MA)
testdatanew$LB <- factor(testdatanew$LB)
testdatanew$AF <- factor(testdatanew$AF)
testdatanew$HU <- factor(testdatanew$HU)
testdatanew$Price <- factor(testdatanew$Price)
testdatanew$year <- factor(testdatanew$year)
testdatanew$Choice <- factor(ifelse(testdatanew$Choice == TRUE, 1, 0))
testdatanew$income <- ifelse(testdatanew$income == "Under $29,999", 15000, ifelse(testdatanew$income == "$30,000 to $39,999", 35000, ifelse(testdatanew$income =="$40,000 to $49,999", 45000, ifelse(testdatanew$income =="$50,000 to $59,999", 55000, ifelse(testdatanew$income =="$60,000 to $69,999", 65000, ifelse(testdatanew$income =="$70,000 to $79,999", 75000, ifelse(testdatanew$income =="$80,000 to $89,999", 85000, ifelse(testdatanew$income =="$90,000 to $99,999", 95000, ifelse(testdatanew$income =="$100,000 to $109,999", 105000, ifelse(testdatanew$income == "$110,000 to $119,999", 115000, ifelse(testdatanew$income == "$120,000 to $129,999", 125000, ifelse(testdatanew$income == "$130,000 to $139,999", 135000, ifelse(testdatanew$income == "$140,000 to $149,999", 145000, ifelse(testdatanew$income == "$150,000 to $159,999", 155000, ifelse(testdatanew$income == "$160,000 to $169,999", 165000, ifelse(testdatanew$income == "$170,000 to $179,999", 175000, ifelse(testdatanew$income == "$180,000 to $189,999", 185000, ifelse(testdatanew$income == "$190,000 to $199,999", 195000, ifelse(testdatanew$income == "$200,000 to $209,999", 205000, ifelse(testdatanew$income == "$220,000 to $229,999", 225000, ifelse(testdatanew$income == "$230,000 to $239,999", 235000, ifelse(testdatanew$income == "$250,000 to $259,999", 255000, ifelse(testdatanew$income == "$270,000 to $279,999", 275000, ifelse(testdatanew$income == "$300,000 & Over", 320000, 0))))))))))))))))))))))))
C50model1 <- C5.0(as.factor(Choice) ~ ., data = traindatanew)
C50model1
C5imp(C50model1)
predC50 <- predict.C5.0(C50model1, newdata = testdatanew, type = "prob")
head(predC50)
N <- nrow(test)
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
head(predC50Matrix)
head(train)
head(traindatanew)
sum(predC50Matrix[1,])
for (k in 1:N){
for (i in 1:4){
predC50Matrix[k,i] <- predC50Matrix[k,i]/sum(predC50Matrix[k,])
}
}
sum(predC50Matrix[1,])
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
head(predC50Matrix)
for (i in 1:N){
for (j in 1:4){
predC50Matrix[i,j] <- predC50Matrix[i,j]/sum(predC50Matrix[i,])
}
}
sum(predC50Matrix[1,])
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
sum(predC50Matrix[1,])
predC50Matrix <- matrix(predC50[,2], nrow = N, ncol = 4, byrow = TRUE)
for (i in 1:N){
for (j in 1:4){
d <- sum(predC50Matrix[i,])
for (i in 1:N){
d <- sum(predC50Matrix[i,])
for (j in 1:4){
predC50Matrix[i,j] <- predC50Matrix[i,j]/d
}
}
sum(predC50Matrix[1,])
predC50Matrix_log <- log(predC50Matrix)
logloss<- -(sum(predC50Matrix_log*train[,95:98]))/N
logloss
write.csv(predC50Matrix, "submission1.csv")
?glm
logreg1 <- glm(Choice ~., data = traindatanew)
logreg1 <- glm(Choice ~., data = traindatanew, family = binomial)
summary(logreg1)
predlogreg1 <- predict(logreg1, newdata = testdatanew)
predlogreg1 <- predict(logreg1, newdata = testdatanew, type = "response")
predlogreg1
res
predlogreg1 <- predict(logreg1, newdata = testdatanew, type = "ponse")
class(predlogreg1)
predogregmat1 <- matrix(predlogreg1, nrow = N, ncol = 4)
predlogregmat1 <- matrix(predlogreg1, nrow = N, ncol = 4)
head(predlogregmat1)
head(predlogreg1)
predlogregmat1 <- matrix(predlogreg1, nrow = N, ncol = 4, byrow = TRUE)
head(predlogregmat1)
sum(predlogregmat1[1,])
for (i in 1:N){
d <- sum(predlogregmat1[i,])
for (j in 1:4){
predlogregmat1[i,j] <- predlogregmat1[i,j]/d
}
}
sum(predlogregmat1[1,])
predlogregmat1_log <- log(predlogregmat1)
logloss<- -(sum(predlogregmat1_log*train[,95:98]))/N
logloss
predC50Matrix_log <- log(predC50Matrix)
logloss<- -(sum(predC50Matrix_log*train[,95:98]))/N
logloss
write.csv(predC50Matrix, "submission1.csv")
library(randomForest)
rf1 <- randomForest(Choice ~ ., data = traindatanew)
predrf1 <- predict(rf1, newdata = testdatanew, type = "prob")
head(predrf1)
which(predrf1==0)
predrf1Matrix <- matrix(predrf1[,2], nrow = N, ncol = 4, byrow = TRUE)
head(predrf1Matrix)
predrf1Matrix_log <- log(predrf1Matrix)
logloss<- -(sum(predrf1Matrix_log*train[,95:98]))/N
logloss
?randomForest
rf1 <- randomForest(Choice ~ ., data = traindatanew, ntree = 1000)
predrf1 <- predict(rf1, newdata = testdatanew, type = "prob")
predrf1Matrix <- matrix(predrf1[,2], nrow = N, ncol = 4, byrow = TRUE)
predrf1Matrix_log <- log(predrf1Matrix)
head(predrf1Matrix_log)
logloss<- -(sum(predrf1Matrix_log*train[,95:98]))/N
logloss
head(predrf1Matrix)
sum(predrf1Matrix[1,])
for (i in 1:N){
d <- sum(predrf1Matrix[i,])
for (j in 1:4){
predrf1Matrix[i,j] <- predrf1Matrix[i,j]/d
}
}
sum(predrf1Matrix[1,])
predrf1Matrix_log <- log(predrf1Matrix)
head(predrf1Matrix_log)
logloss<- -(sum(predrf1Matrix_log*train[,95:98]))/N
logloss
logloss
predC50Matrix_log <- log(predC50Matrix)
logloss<- -(sum(predC50Matrix_log*train[,95:98]))/N
logloss
predlogregmat1_log <- log(predlogregmat1)
logloss<- -(sum(predlogregmat1_log*train[,95:98]))/N
logloss
library(C50)
?CC5.0
?C5.0
model6 <- mlogit(Choice ~ CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price | income + segment + educ + miles + age + region + Urb + ppark + night, data = traindata)
summary(model1)
lrtest(model1, model2)
lrtest(model2, model3)
lrtest(model3, model4)
lrtest(model5, model6)
index(traindata)
index(traindata)$alt
m <- model.matrix(model6)
alt <- index(testdata)$alt
chid <- index(testdata)$chid
eXb <- as.numeric(exp(m %*% coef(model6)))
SeXb <- tapply(eXb, chid, sum)
head(index(testdata)$chid)
model.matrix(model6)
head(model.matrix(model6))
?model.matrix
write.csv(predrf1Matrix, "submissionday1_2.csv")
m <- model.matrix(model6)
alt <- index(testdata)$alt
chid <- index(testdata)$chid
eXb <- as.numeric(exp(m %*% coef(model6)))
SeXb <- tapply(eXb, chid, sum)
length(chid)
length(eXb)
m <- model.matrix(testdata)
m <- model.matrix(test)
coef(model6)
head(coef(model6))
m <- testdata
alt <- index(testdata)$alt
chid <- index(testdata)$chid
eXb <- as.numeric(exp(m %*% coef(model6)))
m <- as.matrix(testdata)
alt <- index(testdata)$alt
chid <- index(testdata)$chid
eXb <- as.numeric(exp(m %*% coef(model6)))
SeXb <- tapply(eXb, chid, sum)
m <- model.matrix(model6)
alt <- index(traindata)$alt
chid <- index(traindata)$chid
eXb <- as.numeric(exp(m %*% coef(model6)))
SeXb <- tapply(eXb, chid, sum)
P <- eXb/SeXb[chid]
P <- matrix(P, ncol = 4, byrow = TRUE)
head(P)
sum(P[1,])
