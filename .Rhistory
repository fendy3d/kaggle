CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3, train_train)
train_train$CC1
class(train_train$CC1)
svm1 <- svm(train_train$Choice ~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3, train_train)
?svm
svm1 <- svm(train_train$Choice ~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4, data=train_train)
install.packages('neuralnet')
library("neuralnet")
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
head(trainingdata)
plot(trainingdata)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:10)^2)
net.results <- compute(net.sqrt, testdata)
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
head(train)
unique(train$CC4)
unique(train$HU34)
unique(train$HU3)
unique(train$AF3)
unique(train$BZ4)
svm1 <- svm(Choice ~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4, data=train_train)
svm1 <- svm(Choice ~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3, data=train_train)
head(train_train,1)
?neuralnet
nn <- neuralnet(Choice~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,data=train_train)
grep("CC1", colnames(train_train))
grep("Price4", colnames(train_train))
head(train_train[,4:83])
head(as.numeric(train_train[,4:83]))
class(train_train[,4:83])
class(train_train[,4])
class(train_train[,4])
class(as.numeric(train_train[,4]))
for (i in 4:83){
train_train[,i]<-as.numeric(train_train[,i])
}
class(train_train[,4])
nn <- neuralnet(Choice~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,data=train_train)
for (i in 4:83){
train_train[,i]<-as.factor(train_train[,i])
}
class(train_train[,4])
nn <- neuralnet(Choice~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
nn <- neuralnet(Choice~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,data=train_train)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
train <- convertincometointeger(convertincome_train(train)) # converts '$290,000 to $299,999' to '$300,000 and over', then take the medium value.
train <- factorise(train) # factorise the variables (segment, year .. ppark)
set.seed(100)
library(caTools)
spl <- sample.split(train$Choice, SplitRatio = 0.7)
train_train <- subset(train, spl == TRUE)
train_test <- subset(train, spl == FALSE)
str(traindata)
str(train_train)
?model.matrix
m <- model.matrix(
~ Choice + CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,
data = train_train
)
head(m)
tail(m)
unique(train_train$Choice)
nn <- neuralnet(Choice~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,data=m)
dd <- data.frame(a = gl(3,4), b = gl(4,1,12))
dd
?gl
?model.matrix
model.matrix(~ a + b, dd)
m
head(m)
m <- model.matrix(
~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,
data = train_train
)
m
head(m)
?cbind
head(train_train$Choice)
m <- cbind(m,train_train$Choice)
head(m)
m <- model.matrix(
~ CC1+GN1+NS1+BU1+FA1+LD1+BZ1+FC1+FP1+RP1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+FA2+LD2+BZ2+FC2+FP2+RP2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+FA3+LD3+BZ3+FC3+FP3+RP3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+FA4+LD4+BZ4+FC4+FP4+RP4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,
data = train_train
)
ncol(m)
ncol(train_train$Choice)
length(train_train$Choice)
nrow(train_train$Choice)
nrow(m)
class(m)
head(m)
class(m$CC1)
class(m[,1])
class(m[,2])
class(m[1,1])
m[1,1]
class(train_train$Choice)
??multinom
?multinom
head(traindata)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
train <- convertincometointeger(convertincome_train(train)) # converts '$290,000 to $299,999' to '$300,000 and over', then take the medium value.
train <- factorise(train) # factorise the variables (segment, year .. ppark)
spl <- sample.split(train$Choice, SplitRatio = 0.7)
train_train <- subset(train, spl == TRUE)
train_test <- subset(train, spl == FALSE)
spl <- sample.split(train$Choice, SplitRatio = 0.6)
train_train <- subset(train, spl == TRUE)
train_test <- subset(train, spl == FALSE)
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
train_traindata <- mlogit.data(train_train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
train_testdata <- mlogit.data(train_test, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
traindata <- mlogit.data(train, shape = "wide", choice = "Choice", varying = c(4:83), sep = "", alt.levels = c("Ch1","Ch2","Ch3","Ch4"), id.var = "Case")
set.seed(42)
require(caret)
model <- train(Species~., data=iris, method='nnet',
trControl=trainControl(method='cv'))
model
probs <- predict(model, type='prob')
head(probs)
head(iris)
?train
class(iris)
head(train)
class(train)
head(train[,4:83])
head(train)
head(train[,99])
head(cbind(train[,4:83],train[,99])
)
head(train)
head(cbind(train[,4:83],train[0,99])
)
head(cbind(train[,4:83],train[1,99]))
class(train[1,99])
class(train[,99])
head(cbind(train[,4:83],train[,99]))
class(train[,4:83])
class(train[,99])
as.data.frame(train[,99])
class(as.data.frame(train[,99]))
head(cbind(train[,4:83],as.data.frame(train[,99])))
train[99]
head(train[99])
head(cbind(train[,4:83],train[99]))
class(cbind(train[,4:83],train[99]))
trainNN <- (cbind(train[,4:83],train[99]))
head(trainNN)
set.seed(100)
modelNN <- train(Choice~., data=trainNN, method='nnet',
trControl=trainControl(method='cv'))
model
require(caret)
model <- train(Species~., data=iris, method='nnet',
trControl=trainControl(method='cv'))
nrow(iris)
ncol(iris)
head(iris)
set.seed(100)
modelNN <- train(Choice~., data=trainNN, method='nnet',
trControl=trainControl(method='cv'))
model
AND <- c(rep(0,7),1)
head(AND)
AND
OR <- c(0,rep(1,7))
OR
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
binary.data
print(net <- neuralnet(AND+OR~Var1+Var2+Var3,  binary.data, hidden=0,
rep=10, err.fct="ce", linear.output=FALSE))
XOR <- c(0,1,1,0)
xor.data <- data.frame(expand.grid(c(0,1), c(0,1)), XOR)
print(net.xor <- neuralnet(XOR~Var1+Var2, xor.data, hidden=2, rep=5))
plot(net.xor, rep="best")
?neuralnet
net <- neuralnet(AND+OR~Var1+Var2+Var3,  binary.data, hidden=0, rep=10, err.fct="sse", linear.output=FALSE))
net <- neuralnet(AND+OR~Var1+Var2+Var3,  binary.data, hidden=0, rep=10, err.fct="sse", linear.output=FALSE)
net
str(trainNN)
net <- neuralnet(Choice~.,  trainNN, hidden=0, rep=10, err.fct="sse", linear.output=FALSE)
net <- neuralnet(Choice~CC1+GN1+NS1+BU1+LD1+BZ1+FC1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1,
CC2+GN2+NS2+BU2+LD2+BZ2+FC2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2,
CC3+GN3+NS3+BU3+LD3+BZ3+FC3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3,
CC4+GN4+NS4+BU4+LD4+BZ4+FC4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,trainNN, hidden=0, rep=10, err.fct="sse", linear.output=FALSE)
net <- neuralnet(Choice~CC1+GN1+NS1+BU1+LD1+BZ1+FC1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+LD2+BZ2+FC2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+LD3+BZ3+FC3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+LD4+BZ4+FC4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,trainNN, hidden=0, rep=10, err.fct="sse", linear.output=FALSE)
binary.data
class(binary.data)
binary.data[,1]
class(binary.data[,1])
class(trainNN[,1])
trainNN[1,1]
nrow(trainNN)
ncol(trainNN)
head(trainNN,1)
trainNN[1,81]
for (i in 1:nrow(trainNN)){
if (trainNN[i,81]) == "Ch1"){
trainNN[i,81] = 1
} else if (trainNN[i,81]) == "Ch2"){
trainNN[i,81] = 2
} else if (trainNN[i,81]) == "Ch3"){
trainNN[i,81] = 3
} else if (trainNN[i,81]) == "Ch4"){
trainNN[i,81] = 4
}
for (i in 1:nrow(trainNN)){
if (trainNN[i,81]) == "Ch1"){
trainNN[i,81] = 1
} else if (trainNN[i,81]) == "Ch2"){
trainNN[i,81] = 2
} else if (trainNN[i,81]) == "Ch3"){
trainNN[i,81] = 3
} else if (trainNN[i,81]) == "Ch4"){
trainNN[i,81] = 4
}
}
head(trainNN)
trainNN[1,81]=="Ch2"
for (i in 1:nrow(trainNN)){
if (trainNN[i,81]) == "Ch1") 1
else if (trainNN[i,81]) == "Ch2") 2
else if (trainNN[i,81]) == "Ch3") 3
else 4
}
for (i in 1:nrow(trainNN)){
if (trainNN[i,81]) == "Ch1") {
trainNN[i,81]=1
} else if ( trainNN[i,81]) == "Ch2") {
trainNN[i,81]=2
} else if ( trainNN[i,81]) == "Ch3") {
trainNN[i,81]=3
} else
trainNN[i,81]=4
}
for (i in 1:nrow(trainNN)){
if (trainNN[i,81] == "Ch1") {
trainNN[i,81]=1
} else if ( trainNN[i,81] == "Ch2") {
trainNN[i,81]=2
} else if ( trainNN[i,81] == "Ch3") {
trainNN[i,81]=3
} else
trainNN[i,81]=4
}
trainNN
trainNN <- (cbind(train[,4:83],train[99]))
trainNN[81]
unique(trainNN[81])
unique(trainNN[81][1])
trainNN[81[1]]
trainNN[81][1]
trainNN[1,81]<-1
head(trainNN[81])
as.factor(trainNN[1,81])<-1
as.factor(trainNN[2,81])
class(trainNN[2,81])
class(trainNN[3,81])
head(trainNN)
trainNN$Choice[trainNN$Choice==Ch1]
trainNN$Choice[trainNN$Choice=="Ch1"]
trainNN$Choice[trainNN$Choice=="Ch1"]<-1
trainNN <- (cbind(train[,4:83],train[99]))
trainNN <- as.character(trainNN)
trainNN <- (cbind(train[,4:83],train[99]))
trainNN$Choice <- as.character(trainNN$Choice)
head(trainNN)
trainNN$Choice[trainNN$Choice=="Ch1"]<-1
trainNN$Choice
trainNN$Choice[trainNN$Choice=="Ch2"]<-2
trainNN$Choice[trainNN$Choice=="Ch3"]<-3
trainNN$Choice[trainNN$Choice=="Ch4"]<-4
trainNN$Choice
class(trainNN$Choice)
trainNN$Choice <- as.integer(trainNN$Choice)
class(trainNN$Choice)
set.seed(100)
net <- neuralnet(Choice~CC1+GN1+NS1+BU1+LD1+BZ1+FC1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+LD2+BZ2+FC2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+LD3+BZ3+FC3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+LD4+BZ4+FC4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,trainNN, hidden=0, rep=10, err.fct="sse", linear.output=FALSE)
net
?compute
class(net)
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
sqrt.data
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,
)
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,threshold=0.01))
net.sqrt
compute(net.sqrt, (1:10)^2)$net.result
net.result
(1:10)^2
sqrt.data
compute(net.sqrt, (1:10)^2)$net.result
(1:10)^2
net
trainNN <- (cbind(train[,4:83],train[99]))
set.seed(100)
head(trainNN)
trainNN$Choice <- as.character(trainNN$Choice)
model <- train(Choice~., data=trainNN, method='nnet',trControl=trainControl(method='cv'))
require(caret)
model <- train(Species~., data=iris, method='nnet',
trControl=trainControl(method='cv'))
model
probs <- predict(model, type='prob')
head(probs)
model <- train(Choice~., data=trainNN, method='nnet',trControl=trainControl(method='cv'))
model
trainNN
trainNN$Choice
class(trainNN$Choice)
trainNN <- (cbind(train[,4:83],train[99]))
set.seed(100)
model <- train(Choice~., data=trainNN, method='nnet',trControl=trainControl(method='cv'))
model
probs <- predict(model, type='prob')
head(probs)
testNN <- test[,4:83]
compute(model, testNN)$net.result
testNN
class(testNN)
ncol(testNN)
head(testNN,1)
nrow(testNN,1)
nrow(testNN)
nrow(na.omit(testNN))
compute(model, testNN)$model.result
class(model)
probs <- predict(model, newdata=testNN, type='prob')
head(probs)
nrow(testNN)
nrow(probs)
nrow(trainNN)
write.table(probs,file="nn.csv",row.names=FALSE)
write.table(probs,file="nn.csv",sep=",",row.names=FALSE)
head(train)
head(train_train)
train_trainNN <- (cbind(train_train[,4:83],train_train[99]))
train_testNN <- (cbind(train_test[,4:83],train_test[99]))
train_testNN <- (cbind(train_test[,4:83]))
train_testNN
head(train_testNN)
model_traintrain <- train(Choice~., data=train_trainNN, method='nnet',trControl=trainControl(method='cv'))
class(train_trainNN$Choice)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
train <- convertincometointeger(convertincome_train(train)) # converts '$290,000 to $299,999' to '$300,000 and over', then take the middle value.
train <- factorise(train) # factorise the variables (segment, year .. ppark)
set.seed(100)
library(caTools)
spl <- sample.split(train$Choice, SplitRatio = 0.7)
train_train <- subset(train, spl == TRUE)
train_test <- subset(train, spl == FALSE)
train_trainNN <- (cbind(train_train[,4:83],train_train[99]))
train_testNN <- (cbind(train_test[,4:83]))
class(train_trainNN$Choice)
train_trainNN$Choice <- as.factor(train_trainNN$Choice)
model_traintrain <- train(Choice~., data=train_trainNN, method='nnet',trControl=trainControl(method='cv'))
compute(model_traintrain, train_testNN)model_traintrain.result
compute(model_traintrain, train_testNN)$model_traintrain.result
probs2 <- predict(model_traintrain, newdata=train_testNN, type='prob')
head(probs2)
probs <- predict(model, newdata=testNN, type='prob')
probs1 <- predict(model, newdata=testNN, type='prob')
head(probs1)
0.25120472322 +0.1535741385 +0.16231621215+ 0.4329049261
write.table(probs,file="nn.csv",sep=",",row.names=FALSE)
head(probs2)
head(train_test$Choice)
?nnet
?trcontrol
?train
?nnet
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
ir
head(ir)
iris3
head(iris3)
head(iris2)
head(iris1)
class(iris3)
iris3[,,1]
head(ir)
head(iris3[,,1])
head(iris3[,,2])
head(ir)
ir
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
ir
targets <- class.ind( c(rep("s", 50), rep("c", 50), rep("v", 50)) )
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
head(samp)
samp
targets
iris3
targets
iris3
sample(1:50,25)
sample(1:50,25)
set.seed(100)
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
samp
sample(1:50,25)
samp
sample(1:50,25)
set.seed(100)
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
sample(1:50,25)
samp
ir[samp,]
targets[samp,]
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1, decay = 5e-4, maxit = 200)
test.cl <- function(true, pred) {
true <- max.col(true)
cres <- max.col(pred)
table(true, cres)
}
targets[-samp,]
targets[samp,]
targets[-samp,]
ir[samp,]
train_train[,4:83]
head(train_train[,4:83],1)
length(head(train_train[,4:83],1))
nnmodel1 <- nnet(train_train[,4:83],train_train[99],size = 38, rang = 0.1, decay = 5e-4, maxit = 200 )
head(train_train[1])
head(train_train,1)
nnmodel1 <- nnet(Choice~CC1+GN1+NS1+BU1+LD1+BZ1+FC1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+LD2+BZ2+FC2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+LD3+BZ3+FC3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+LD4+BZ4+FC4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,train_train,size = 38, rang = 0.1, decay = 5e-4, maxit = 200 )
nnmodel1 <- nnet(Choice~CC1+GN1+NS1+BU1+LD1+BZ1+FC1+PP1+KA1+SC1+TS1+NV1+MA1+LB1+AF1+HU1+Price1+
CC2+GN2+NS2+BU2+LD2+BZ2+FC2+PP2+KA2+SC2+TS2+NV2+MA2+LB2+AF2+HU2+Price2+
CC3+GN3+NS3+BU3+LD3+BZ3+FC3+PP3+KA3+SC3+TS3+NV3+MA3+LB3+AF3+HU3+Price3+
CC4+GN4+NS4+BU4+LD4+BZ4+FC4+PP4+KA4+SC4+TS4+NV4+MA4+LB4+AF4+HU4+Price4,train_train,size = 2, rang = 0.1, decay = 5e-4, maxit = 200 )
nnmodel1 <- nnet(train_train[,4:83],train_train[99],size = 10, rang = 0.1, decay = 5e-4, maxit = 200 )
nnmodel1
nnmodel1 <- nnet(train_train[,4:83],train_train[99],size = 2, rang = 0.1, decay = 5e-4, maxit = 200 )
nrow(train_train)
nrow(na.omit(train_train))
nnmodel1 <- nnet(train_train[,4:83],train_train[99],size = 2, rang = 0.1, decay = 5e-4, maxit = 200 )
traceback()
class(train_train[90])
head(train_train[90])
head(train_train[99])
class(head(train_train[99]))
class(head(train_train[99][1]))
train_train[99][1]
train_train[,99]
class(train_train[,99])
train_train[99]
class(train_train[99])
train_train[,99]
class(train_train[,99])
head(train_train[,99])
class(train_train[,4:83])
nnmodel1 <- nnet(train_train[,4:83],train_train[,99],size = 2, rang = 0.1, decay = 5e-4, maxit = 200 )
nnmodel1
nnmodel1 <- nnet(train_train[,4:83],train_train[,99],size = 2, rang = 0.1, decay = 5e-4, maxit = 200 )
nnmodel1 <- nnet(train_train[,4:83],train_train[,99],size = 38, rang = 0.1, decay = 5e-4, maxit = 200 )
class(nnmodel1)
1+1
